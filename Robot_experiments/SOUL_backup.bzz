include "vec2.bzz"
include "string.bzz"

MISSION_TIME = 0
BSTIG_ID = 100
mission_robot_id = id
steps_cnt = 0
check_blob = 0
replacement_timer = 0
replacement_wait_time = 40
Replacement_robotid = 10
dying_robot_id = 6
NUM_OF_ROBOTS = 9
blob_not_removed = 0
led_paterns={.0=0,	.1=250,	.2=0,		.3=0,		.4=250,		.5=0,		.6=0,		.7=0,		.8=0,
						.9=250, .10=0,	.11=0,	.12=250,	.13=0,	.14=0,	.15=0,	.16=0,	.17=0,
						.18=0,	.19=0,	.20=250,	.21=0,	.22=0,	.23=250,	.24=0, .25=0,	.26=0,
						.27=0,	.28=0,	.29=0,	.30=250,	.31=0,	.32=0,	.33=250,	.34=0,	.35=0,
						.36=0,	.37=0,	.38=0,	.39=0,	.40=250,	.41=0,	.42=0,	.43=250,	.44=0,
						.45=0,	.46=0,	.47=0,	.48=0,	.49=250,	.50=0,	.51=0,	.52=0,	.53=250,
						.54=250,	.55=0,	.56=0,	.57=0,	.58=0,	.59=0,	.60=250,	.61=0,	.62=0,
						.63=0,	.64=0,	.65=250,	.66=0,	.67=0,	.68=0,	.69=0,	.70=0,	.71=250,
						.72=0,	.73=0,	.74=0,	.75=250,	.76=250,	.77=250,	.78=250,	.79=250,	.80=250,
						.81=250,	.82=0,	.83=0,	.84=0,	.85=0,	.86=0,	.87=0,	.88=250,	.89=0}

waypoints = {
	.0 = math.vec2.new(0.0, 0.0),
	.1 = math.vec2.new(-2.0, 0.0),
	.2 = math.vec2.new(-1.0, -1.0),
	.3 = math.vec2.new(0.0, 0.0)
}

# circle all together
function pursuit() {
	neighbors.foreach(function(rid ,data) {
		#log(rid, data.azimuth, absolute_position.theta)
		if(data.azimuth < 0.08  and data.azimuth > (-0.08) and data.distance < 0.65) {  # Checks if any robot is within -2 degrees and 2 degrees of vision
			set_wheels(7.0, 1.0) # Sets the velocity of the wheels
			log("Gotcha !!")
		}
		else {
			set_wheels(3.0, 6.0) # Sets the velocity of the wheels if no robot is in range of vision
		}
	})
}


function pursuit_abs() {
		rd = 0.85
		center = math.vec2.new(0.5, 0)
		arc_pos = math.vec2.add(center, math.vec2.newp(rd, (MISSION_TIME)*math.pi/30.0+mission_robot_id*math.pi/4.35))
		log(arc_pos.x, " : ", arc_pos.y, " | ", absolute_position.x, " : ", absolute_position.y)
		movetotarget(arc_pos)
}

function movetotarget(goal) {
	goto_vec = math.vec2.new(goal.x - absolute_position.x, goal.y - absolute_position.y)
	goto_vec = math.vec2.scale(math.vec2.newp(math.vec2.length(goto_vec), math.vec2.angle(goto_vec) - absolute_position.theta),0.25)
	#if(math.vec2.length(goto_vec) > 0.05)
		avanti(math.vec2.length(goto_vec),  math.vec2.angle(goto_vec))
}

function WrapValue(ang) {
         while(ang > math.pi)
				 	ang = ang - 2*math.pi
         while(ang < -math.pi)
				 	ang = ang + 2*math.pi
				 return ang
}

function avanti(v, omega){
	var hard_turn = 0.6
	L = 0.105
	R = 0.015

	v_l = 0.0
	v_r = 0.0
	v_max = 5.0

	if(math.abs(omega) > hard_turn){
		#log("Hard turn...")
		if(WrapValue(omega) > 0.0) {
			v_l = -v_max * 0.5
			v_r = v_max * 0.5
		} else {
			v_l = v_max * 0.5
			v_r = -v_max * 0.5
		}
	} else {
		v_l = (( 2.0 * v ) - (omega * L )) / (2.0 * R)
		v_r = (( 2.0 * v ) + (omega * L )) / (2.0 * R)
	}

	set_wheels(v_l, v_r)
}
################################################################################

function set_id_leds() {
	set_led(led_paterns[(mission_robot_id-1)*9],led_paterns[(mission_robot_id-1)*9+1],led_paterns[(mission_robot_id-1)*9+2],0)
	set_led(led_paterns[(mission_robot_id-1)*9+3],led_paterns[(mission_robot_id-1)*9+4],led_paterns[(mission_robot_id-1)*9+5],1)
	set_led(led_paterns[(mission_robot_id-1)*9+6],led_paterns[(mission_robot_id-1)*9+7],led_paterns[(mission_robot_id-1)*9+8],2)
}

function init() {
	s = swarm.create(1)
	if(id != Replacement_robotid){
		s.join()
	}
	blobstig= bstigmergy.create(BSTIG_ID)
	if(id < 5){
		blobstig.setgetter()
	}
}

function step() {
	if(ROBOTS==NUM_OF_ROBOTS and id != Replacement_robotid) {
		set_id_leds()
		if(steps_cnt > 10) {
			MISSION_TIME = MISSION_TIME + 1
			set_led_freq(MISSION_TIME/3)
			steps_cnt= 0
		}	else
			steps_cnt = steps_cnt + 1

		pursuit_abs()
		if(id==dying_robot_id and MISSION_TIME > 45) {
			log("Dying !!!")
			if(check_blob == 0 ){
		                check_blob = 1	
				# Serialize my vm and add to bstig 
				my_ser_vm = getblobvm()
	    			blobstig.putblob(id,my_ser_vm)
			}
			if(blobstig.getblobseqdone(id) == 1){
				log("robot 3 done with blob seq")
				neighbors.broadcast("blob_done", id)
				s.leave()
    	 		}
		}
		neighbors.listen("remove_blob",
		       function(vid, value, rid) {
			log("Remove blob received (", vid, ",", value, ") from robot #", rid)
			if(blob_not_removed == 0){
					blob_not_removed = 1;
					blobstig.putblob(dying_robot_id,nil)
			}
					
		       })
	} else if(id != Replacement_robotid){
		set_wheels(0.0,0.0)
		set_leds(200,0,0)
	}
	if(id == dying_robot_id and check_blob == 1){
		movetotarget(waypoints[1])
	}
	
	if(id == Replacement_robotid){
		neighbors.listen("blob_done",
		       function(vid, value, rid) {
			log("Got (", vid, ",", value, ") from robot #", rid)
			if(blobstig.blobstatus(dying_robot_id) == 1 and check_blob == 0){
			      m_blob = blobstig.getblob(dying_robot_id)
			      log("Getting blob for key ",dying_robot_id)
			      if(m_blob != nil){
				check_blob = 1
				log("GOT VM BLOB, deserializing and setting ...")
				setblobvm(m_blob)
				log("Set successfull")
				if(blob_not_removed == 0){
					blob_not_removed = 1;
					blobstig.putblob(dying_robot_id,nil)
			      	}	
			      }
			}
					
		       })
		if(check_blob == 1 and replacement_timer == replacement_wait_time){
			s.join()
		}
		else if(check_blob == 1){
			neighbors.broadcast("remove_blob", id)
			replacement_timer = replacement_timer + 1
		}
		if(check_blob == 1 and ROBOTS==NUM_OF_ROBOTS){
			set_id_leds()
			if(steps_cnt > 10) {
				MISSION_TIME = MISSION_TIME + 1
				set_led_freq(MISSION_TIME/2)
				steps_cnt= 0
			}	else
				steps_cnt = steps_cnt + 1

			pursuit_abs()
		}

	}

}

function destroy() {
}
